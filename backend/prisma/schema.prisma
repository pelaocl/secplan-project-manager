// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---
enum Role {
  ADMIN
  COORDINADOR
  USUARIO
  VISITANTE // Implicitamente no tiene registro en User, pero útil para lógica
}

enum TipoMoneda {
  CLP
  UF
}

enum EstadoTarea {
  PENDIENTE
  EN_PROGRESO
  COMPLETADA
  EN_REVISION // Ejemplo, si el coordinador necesita revisar antes de cerrar
  CANCELADA
}

enum PrioridadTarea {
  ALTA
  MEDIA
  BAJA
}

enum TipoNotificacion {
  NUEVA_TAREA_ASIGNADA
  NUEVO_MENSAJE_TAREA
  TAREA_ACTUALIZADA_ESTADO
  TAREA_ACTUALIZADA_INFO // Para otros cambios en la tarea
  TAREA_COMPLETADA
  TAREA_VENCIMIENTO_PROXIMO // (Este requeriría un job en el backend para generarse)
  // Puedes añadir más tipos según necesites
}

enum TipoRecursoNotificacion {
  TAREA
  MENSAJE_CHAT_TAREA
  PROYECTO // Por si quieres notificaciones a nivel de proyecto
}

// --- MODELS ---

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(USUARIO)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones existentes
  etiquetas           Etiqueta[] @relation("UserEtiquetas")
  proyectosCreados    Project[]  @relation("ProyectistaProjects") // Asumo que este es el "proyectista" principal del proyecto
  proyectosFormulados Project[]  @relation("FormuladorProjects")
  proyectosColabora   Project[]  @relation("ProjectCollaborators")

  // Relaciones con Tarea (actualizar la existente y añadir la nueva)
  tareasAsignadas Tarea[] @relation("TareasAsignadasAUsuario")
  tareasCreadas   Tarea[] @relation("TareasCreadasPorUsuario") // NUEVO: Tareas creadas por este usuario

  // Relaciones con MensajeChatTarea y Notificacion (NUEVAS)
  mensajesEnviados MensajeChatTarea[] @relation("MensajesEnviadosPorUsuario")
  notificaciones   Notificacion[]     @relation("NotificacionesParaUsuario")

  tareasDondeParticipa Tarea[] @relation("TareaParticipantes") // Tareas en las que participa (M2M)
  
  taskChatStatuses UserTaskChatStatus[] @relation("TaskChatStatusesByUser")

  @@map("users")
}

model Etiqueta {
  id     Int    @id @default(autoincrement())
  nombre String @unique
  color  String // ej. Hex color code '#RRGGBB'

  // Relaciones
  usuarios User[] @relation("UserEtiquetas")

  @@map("etiquetas")
}

model Project {
  id                    Int      @id @default(autoincrement())
  codigoUnico           String   @unique // Generado: [ABR_TIPOLOGIA]-[CORRELATIVO]
  nombre                String
  descripcion           String? // Interno
  direccion             String?
  imagenUrl             String?
  superficieTerreno     Float? // m²
  superficieEdificacion Float? // m² (nullable)
  ano                   Int? // Año iniciativa
  proyectoPriorizado    Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relaciones Información Básica
  estadoId    Int?
  estado      EstadoProyecto?   @relation(fields: [estadoId], references: [id])
  unidadId    Int?
  unidad      UnidadMunicipal?  @relation(fields: [unidadId], references: [id])
  tipologiaId Int // Requerida
  tipologia   TipologiaProyecto @relation(fields: [tipologiaId], references: [id])
  sectorId    Int?
  sector      Sector?           @relation(fields: [sectorId], references: [id])

  // Relaciones Equipo (Interno)
  proyectistaId Int?
  proyectista   User?  @relation("ProyectistaProjects", fields: [proyectistaId], references: [id])
  formuladorId  Int?
  formulador    User?  @relation("FormuladorProjects", fields: [formuladorId], references: [id])
  colaboradores User[] @relation("ProjectCollaborators") // Many-to-Many implícita por Prisma

  // Relaciones Información Financiera (Interno)
  lineaFinanciamientoId     Int?
  lineaFinanciamiento       LineaFinanciamiento? @relation(fields: [lineaFinanciamientoId], references: [id])
  programaId                Int?
  programa                  Programa?            @relation(fields: [programaId], references: [id])
  etapaFinanciamientoId     Int?
  etapaActualFinanciamiento EtapaFinanciamiento? @relation(fields: [etapaFinanciamientoId], references: [id])
  monto                     Decimal?             @db.Decimal(15, 2)
  tipoMoneda                TipoMoneda           @default(CLP)
  codigoExpediente          String?
  fechaPostulacion          DateTime?            @db.Date // Guardar solo fecha
  montoAdjudicado           Decimal?             @db.Decimal(15, 2)
  codigoLicitacion          String?

  // --- Campos de Geometría ---
  location_point Json? // Para GeoJSON de un Punto
  area_polygon   Json? // Para GeoJSON de un Polígono

  // Relaciones futuras
  tareas Tarea[] // Para bitácora

  @@map("proyectos")
}

// --- Lookup Tables ---

model EstadoProyecto {
  id        Int       @id @default(autoincrement())
  nombre    String    @unique
  proyectos Project[]

  @@map("estados_proyecto")
}

model UnidadMunicipal {
  id          Int       @id @default(autoincrement())
  nombre      String    @unique
  abreviacion String    @unique
  proyectos   Project[]

  @@map("unidades_municipales")
}

model TipologiaProyecto {
  id          Int       @id @default(autoincrement())
  nombre      String    @unique
  abreviacion String    @unique // Usada para codigoUnico
  colorChip   String // ej. Hex color code '#RRGGBB'
  proyectos   Project[]

  @@map("tipologias_proyecto")
}

model Sector {
  id        Int       @id @default(autoincrement())
  nombre    String    @unique
  proyectos Project[]

  @@map("sectores")
}

model LineaFinanciamiento {
  id        Int        @id @default(autoincrement())
  nombre    String     @unique
  proyectos Project[]
  programas Programa[]

  @@map("lineas_financiamiento")
}

model Programa {
  id                    Int                 @id @default(autoincrement())
  nombre                String
  lineaFinanciamientoId Int
  lineaFinanciamiento   LineaFinanciamiento @relation(fields: [lineaFinanciamientoId], references: [id])
  proyectos             Project[]

  @@unique([nombre, lineaFinanciamientoId])
  @@map("programas")
}

model EtapaFinanciamiento {
  id        Int       @id @default(autoincrement())
  nombre    String    @unique
  proyectos Project[]

  @@map("etapas_financiamiento")
}

// Modelo Básico para futura Bitácora
model Tarea {
  id                 Int       @id @default(autoincrement())
  titulo             String
  descripcion        String?
  fechaCreacion      DateTime  @default(now())
  fechaActualizacion DateTime  @updatedAt
  fechaPlazo         DateTime?

  estado    EstadoTarea     @default(PENDIENTE)
  prioridad PrioridadTarea?

  proyectoId Int
  proyecto   Project @relation(fields: [proyectoId], references: [id], onDelete: Cascade)

  creadorId Int
  creador   User @relation("TareasCreadasPorUsuario", fields: [creadorId], references: [id])

  asignadoId Int? // Responsable principal (opcional)
  asignado   User? @relation("TareasAsignadasAUsuario", fields: [asignadoId], references: [id])

  participantes User[] @relation("TareaParticipantes") // Lista de usuarios que colaboran/participan

  mensajes MensajeChatTarea[]

  chatStatuses     UserTaskChatStatus[] @relation("ChatStatusesForTask")

  @@map("tareas_bitacora")
}

model MensajeChatTarea {
  id         Int      @id @default(autoincrement())
  contenido  String // Almacenará HTML del editor de texto enriquecido
  fechaEnvio DateTime @default(now())

  tareaId Int
  tarea   Tarea @relation(fields: [tareaId], references: [id], onDelete: Cascade) // Si se borra la tarea, se borran sus mensajes

  remitenteId Int
  remitente   User @relation("MensajesEnviadosPorUsuario", fields: [remitenteId], references: [id])

  // Para "leído por" (avanzado, considera para una v2):
  // leidoPor     User[]   @relation("MensajesLeidosPorUsuarios")

  @@map("mensajes_chat_tarea")
}

model Notificacion {
  id            Int      @id @default(autoincrement())
  mensaje       String // Texto de la notificación
  leida         Boolean  @default(false)
  fechaCreacion DateTime @default(now())
  urlDestino    String? // Ej: /projects/1/tasks/5

  tipo TipoNotificacion

  usuarioId Int // El usuario que recibe la notificación
  usuario   User @relation("NotificacionesParaUsuario", fields: [usuarioId], references: [id], onDelete: Cascade)

  // Campos para vincular la notificación a un recurso específico
  recursoId   Int? // ID de la Tarea, MensajeChatTarea, etc.
  recursoTipo TipoRecursoNotificacion?

  @@map("notificaciones")
}

model UserTaskChatStatus {
  id                Int      @id @default(autoincrement())
  userId            Int
  user              User     @relation("TaskChatStatusesByUser", fields: [userId], references: [id], onDelete: Cascade)
  taskId            Int
  tarea             Tarea    @relation("ChatStatusesForTask", fields: [taskId], references: [id], onDelete: Cascade)
  lastReadTimestamp DateTime // Timestamp de cuándo el usuario vio por última vez este chat

  @@unique([userId, taskId]) // Clave única compuesta
  @@map("user_task_chat_statuses")
}